// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EventType {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  events      Event[] // Relacionamento bidirecional com Event
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  name       String
  type       UserType

  RPGs       RPG[]       @relation("UserRPGs")
  characters Character[] @relation("UserCharacters")
}

model RPG {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  masterid    Int
  active      Boolean      @default(true)
  master      User         @relation("UserRPGs", fields: [masterid], references: [id], onDelete: Cascade)

  characters  Character[]  @relation("RPGCharacters")
}

model Character {
  id      Int      @id @default(autoincrement())
  name    String
  ownerId Int
  owner   User     @relation("UserCharacters", fields: [ownerId], references: [id], onDelete: Cascade)
  rpgId   Int
  rpg     RPG      @relation("RPGCharacters", fields: [rpgId], references: [id], onDelete: Cascade)
  events  Event[]  @relation("CharacterEvents")
}

model Event {
  id          Int         @id @default(autoincrement())
  description String
  characterId Int
  createdAt   DateTime    @default(now())
  typeId      Int
  type        EventType   @relation(fields: [typeId], references: [id], onDelete: Cascade)
  character   Character   @relation("CharacterEvents", fields: [characterId], references: [id], onDelete: Cascade)
}

enum UserType {
  admin
  user
}